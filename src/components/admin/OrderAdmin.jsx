import React, { useEffect, useState } from "react";
import "../../OrderAdmin.css"; // File CSS ƒë√£ ch·ªânh m√†u s·∫Øc
import Header from "../header/Header";
import { getToken } from "../../services/Cookies";
import dayjs from "dayjs";
import MenuBar from "../menu/MenuBar";

const Orders = () => {
  const [orders, setOrders] = useState([]); // State l∆∞u ƒë∆°n h√†ng
  const [loading, setLoading] = useState(true); // State loading
  const [error, setError] = useState(null); // State l·ªói
  const [currentPage, setCurrentPage] = useState(0); // Trang hi·ªán t·∫°i
  const [totalPages, setTotalPages] = useState(1); // T·ªïng s·ªë trang

  const token = getToken(); // Thay token API th·ª±c t·∫ø v√†o ƒë√¢y
  const formatDate = (isoDate) => dayjs(isoDate).format("DD/MM/YYYY HH:mm");

  const fetchOrders = async (page) => {
    try {
      const response = await fetch(
        `https://datn.up.railway.app/api/admin/orders?page=${page}&size=9`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
        }
      );

      if (!response.ok) {
        throw new Error(`L·ªói: ${response.status}`);
      }

      const data = await response.json();
      setOrders(data.content); // Set d·ªØ li·ªáu API
      setTotalPages(data.totalPages); // C·∫≠p nh·∫≠t t·ªïng s·ªë trang
    } catch (err) {
      setError(err.message); // L∆∞u l·ªói v√†o state
    } finally {
      setLoading(false); // T·∫Øt tr·∫°ng th√°i loading
    }
  };

  useEffect(() => {
    fetchOrders(currentPage);
  }, [currentPage]);

  const handlePageChange = (page) => {
    if (page >= 0 && page < totalPages) {
      setCurrentPage(page);
    }
  };

  return (
    <>
      <Header />
      <div className="orders-container-admin">
        <MenuBar />
        <div className="layout-content">
          {loading ? (
            <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
          ) : error ? (
            <p>{error}</p>
          ) : (
            <>
              <table>
                <thead>
                  <tr>
                    <th>M√£ thu√™</th>
                    <th>Kh√°ch h√†ng</th>
                    <th>ƒê·ªãa ch·ªâ</th>
                    <th>Gi√° ti·ªÅn</th>
                    <th>C·ªïng thanh to√°n</th>
                    <th>Tr·∫°ng th√°i</th>
                    <th>Kh·ªüi t·∫°o</th>
                    <th>C·∫≠p nh·∫≠t</th>
                  </tr>
                </thead>
                <tbody>
                  {orders.map((order, index) => (
                    <tr key={index}>
                      <td>
                        <a href={`/OrderProduct/${order.id}`} style={{ color: "#007bff" }}>
                          {order.id}
                        </a>
                      </td>
                      <td>
                        <div>
                          <strong>ƒê∆°n {order.order.id}</strong>
                        </div>
                        <div>üìû {order.order.currentPhone}</div>
                      </td>
                      <td>üìç {order.order.currentAddress}</td>
                      <td>{order.currentPrice}</td>
                      <td>{order.order.payment}</td>
                      
                      <td>
                        {/* Hi·ªÉn th·ªã tr·∫°ng th√°i */}
                        {(() => {
                          const statusMapping = {
                            1: "Ch∆∞a thanh to√°n",
                            2: "ƒê√£ thanh to√°n",
                            3: "ƒêang giao",
                            4: "ƒê√£ giao ƒë·∫øn n∆°i",
                            5: "Y√™u c·∫ßu tr·∫£ h√†ng",
                            6: "ƒê√£ ho√†n c·ªçc",
                            7: "ƒê√£ giao ƒë·∫øn n∆°i",
                            8: "Ho√†n t·∫•t",
                          };
                          return statusMapping[order.status] || "Tr·∫°ng th√°i kh√°c";
                        })()}
                      </td>
                      <td>{formatDate(order.createdAt)}</td>
                      <td>{formatDate(order.updatedAt)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
              {/* Thanh ph√¢n trang */}
              <div className="pagination">
                <button
                  onClick={() => handlePageChange(currentPage - 1)}
                  disabled={currentPage === 0}
                >
                  Trang tr∆∞·ªõc
                </button>
                <span>
                  Trang {currentPage + 1} / {totalPages}
                </span>
                <button
                  onClick={() => handlePageChange(currentPage + 1)}
                  disabled={currentPage === totalPages - 1}
                >
                  Trang sau
                </button>
              </div>
            </>
          )}
        </div>
      </div>
    </>
  );
};

export default Orders;
